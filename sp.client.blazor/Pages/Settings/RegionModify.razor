@page "/settings/region-modify/{RegionId:guid}"

@using sp.iot.core

@inject SettingsClient SettingsClient
@inject NavigationManager NavigationManager

<ModifyItemComponent Model="@editModel" IsLoaded="@pageBusinessInitalized" ItemTypeName="Region"
    BaseReturnUrl="@($"settings-region-list")" OnSave="@OnSave" IsNew="@isNew">

    <FormTemplate>
        <div class="form-group">
            <label for="Id">Anahtar: </label>
            <label Id="Id">@editModel.Id</label>
        </div>

        <div class="form-group">
            <label for="name">Adı: </label>
            <InputText Id="name" Class="form-control" @bind-Value="@editModel.Name"></InputText>
            <ValidationMessage For="@(() => editModel.Name)" />
        </div>

        <div class="form-group">
            <label for="name">Tipi: </label>
            <InputSelect Id="name" Class="form-control" @bind-Value="@editModel.Type">
                <option value="">Tipini Seçiniz...</option>
                <option value="NotSet">Tanımsız...</option>
                <option value="Floor">Kat</option>
                <option value="Tank">Tank</option>
                <option value="Motohome">Karavan</option>
                <option value="Boat">Tekne</option>

            </InputSelect>
            <ValidationMessage For="@(() => editModel.Name)" />
        </div>

    </FormTemplate>
</ModifyItemComponent>


@code {
    [Parameter]
    public Guid RegionId { get; set; }
    private Settings settings = null;
    private bool pageBusinessInitalized = false;
    private bool isNew = false;
    private Region editModel = new Region();

    protected override async Task OnParametersSetAsync()
    {
        settings = await SettingsClient.GetAsync();
        
        var targetRegion = settings.Regions.FirstOrDefault(item => item.Id == RegionId);


        if (targetRegion != null)
        {
            editModel = targetRegion;
        }
        else
        {
            editModel = new Region();
            editModel.Id = RegionId;
            editModel.Type = RegionType.NotSet;
            settings.Regions.Add(editModel);
            isNew = true;
        }

        pageBusinessInitalized = true;
    }

    private async Task<List<SaveResponseAction>> OnSave()
    {
        var result = await SettingsClient.SaveAsync(settings);
        List<SaveResponseAction> actionItems = result.Actions;
        return actionItems;
    }
}