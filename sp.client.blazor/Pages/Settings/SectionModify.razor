@page "/settings/section-modify/{RegionId:guid}/{SectionId:guid}"

@using sp.iot.core

@inject SettingsClient SettingsClient
@inject NavigationManager NavigationManager

<h1>Birim Guncelleme</h1>


<EditForm Model="@editModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
      
    <div class="form-group">        
        <label for="Id">Anahtar: </label>  
        <label Id="Id">editModel.Id</label>       
    </div>    

    <div class="form-group">        
        <label for="name">AdÄ±: </label>        
        <InputText Id="name" Class="form-control" @bind-Value="@editModel.Name"></InputText>        
        <ValidationMessage For="@(() => editModel.Name)" />    
    </div>    

    <button class="btn btn-primary" type="submit">Kaydet</button>
    <BackButtonComponent BaseReturnUrl="@($"settings-section-list/{RegionId}")" />
    <SaveResponseDetail Display=@showResponseLog Items=@actionItems />

</EditForm>


@code {
    [Parameter]
    public Guid RegionId { get; set; }

     [Parameter]
    public Region Region { get; set; }

    [Parameter]
    public Guid SectionId { get; set; }

    private bool showResponseLog = false;

    private Settings settings = null;
    private Section editModel = new Section();


    protected override async Task OnParametersSetAsync()
    {
        settings = await SettingsClient.GetAsync();
        Region = settings.Regions.First(item => item.Id == RegionId);

        var targetSection = Region.Sections.FirstOrDefault(item => item.Id == SectionId);

        if (targetSection != null)
        {
            editModel = targetSection;
        }
        else
        {
            editModel = new Section();
            editModel.Id = SectionId;
            Region.Sections.Add(editModel);
        }
    }

    private List<SaveResponseAction> actionItems { get; set; }

    private async void HandleValidSubmit()
    {
        var result = await SettingsClient.SaveAsync(settings);
        actionItems = result.Actions;
        showResponseLog = true;
        StateHasChanged();
    }

}