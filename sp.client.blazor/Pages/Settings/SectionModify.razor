@page "/settings/section-modify/{RegionId:guid}/{SectionId:guid}"

@using sp.iot.core

@inject SettingsClient SettingsClient
@inject NavigationManager NavigationManager

<h1>New Or Modify Section</h1>


<EditForm Model="@editModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

     <p>
        <label>
            Id:
                 @editModel.Id
        </label>
    </p>

     <p>
        <label>
            AdÄ±:
                <InputText id="name" @bind-Value="editModel.Name" />
        </label>
    </p>

    <button class="btn btn-primary" type="submit">Kaydet</button>
    
    <BackButtonComponent BaseReturnUrl="@($"settings-section-list/{RegionId}")" />

    <SaveResponseDetail Display=@showResponseLog Items=@actionItems />

</EditForm>


@code {
    [Parameter]
    public Guid RegionId { get; set; }

    [Parameter]
    public Guid SectionId { get; set; }

    private bool showResponseLog = false;

    private Settings settings = null;
    private Section editModel = new Section();


    protected override async Task OnParametersSetAsync()
    {
        settings = await SettingsClient.GetAsync();
        var targetRegion = settings.Regions.First(item => item.Id == RegionId);

        var targetSection = targetRegion.Sections.FirstOrDefault(item => item.Id == SectionId);

        if (targetSection != null)
        {
            editModel = targetSection;
        }
        else
        {
            editModel = new Section();
            editModel.Id = SectionId;
            targetRegion.Sections.Add(editModel);
        }
    }

    private List<SaveResponseAction> actionItems { get; set; }

    private async void HandleValidSubmit()
    {
        var result = await SettingsClient.SaveAsync(settings);
        actionItems = result.Actions;
        showResponseLog = true;
        StateHasChanged();
    }

}