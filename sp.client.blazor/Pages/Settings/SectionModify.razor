@page "/settings/section-modify/{RegionId:guid}/{SectionId:guid}"

@using sp.iot.core

@inject SettingsClient SettingsClient
@inject NavigationManager NavigationManager


<ModifyItemComponent 
    Model = "@editModel"
    IsLoaded = "@pageBusinessInitalized"
    ItemTypeName = "Section"
    BaseReturnUrl = "@($"settings/section-list/{RegionId}")"
    OnSave = "@OnSave"
    IsNew = "@isNew"
    >

    <FormTemplate>
        <div class="form-group">        
            <label Id="Id">@editModel.Id</label>       
        </div>    

        <div class="form-group">        
            <label for="name">Name: </label>        
            <InputText Id="name" Class="form-control" @bind-Value="@editModel.Name"></InputText>        
            <ValidationMessage For="@(() => editModel.Name)" />    
        </div> 

         <div class="form-group">
            <label for="name">Type: </label>
            <InputSelect Id="name" Class="form-control" @bind-Value="@editModel.Type">
                <option value="">Please Select...</option>
                <option value="NotSet">Undefined...</option>
                <option value="Room">Room</option>
                <option value="Tank">Tank</option>
                <option value="Partial">Partial</option>

            </InputSelect>
            <ValidationMessage For="@(() => editModel.Name)" />
        </div>

    </FormTemplate>
</ModifyItemComponent>

@code {
    [Parameter]
    public Guid RegionId { get; set; }

    [Parameter]
    public Region Region { get; set; }

    [Parameter]
    public Guid SectionId { get; set; }

    private bool pageBusinessInitalized = false;
    private bool isNew = false;

    private Settings settings = null;
    private Section editModel = new Section();


    protected override async Task OnParametersSetAsync()
    {
        settings = await SettingsClient.GetAsync();
        Region = settings.Regions.First(item => item.Id == RegionId);

        var targetSection = Region.Sections.FirstOrDefault(item => item.Id == SectionId);

        if (targetSection != null)
        {
            editModel = targetSection;
        }
        else
        {
            editModel = new Section();
            editModel.Id = SectionId;
            Region.Sections.Add(editModel);
            isNew = true;
        }

        pageBusinessInitalized = true;
    }


    private async Task<List<SaveResponseAction>> OnSave()
    {
        var result = await SettingsClient.SaveAsync(settings);
        List<SaveResponseAction> actionItems = result.Actions;
        return actionItems;
    }

}