@page "/settings/gadget/modify/{SectionId:guid}/{GadgetId:guid}"

@using sp.iot.core

@inject SettingsClient SettingsClient
@inject NavigationManager NavigationManager


<ModifyItemComponent 
    Model = "@Gadget"
    IsLoaded = "@pageBusinessInitalized"
    ItemTypeName = "Gadget"
    BaseReturnUrl = "@($"settings/gadget/list/{SectionId}")"
    OnSave = "@OnSave"
    IsNew = "@isNew"
    >

    <FormTemplate>
        <div class="form-group">        
            <label for="Id">Anahtar: </label>  
            <label Id="Id">@Gadget.Id</label>       
        </div>    

        <div class="form-group">        
            <label for="name">AdÄ±: </label>        
            <InputText Id="name" Class="form-control" @bind-Value="@Gadget.Name"></InputText>        
            <ValidationMessage For="@(() => Gadget.Name)" />    
        </div>  

        <div class="form-group">
            <label for="status">Gadget Definition: </label>
            <InputSelect Id="status" Class="form-control" @bind-Value="@Gadget.Definition">
                <option value="">Please Select...</option>
                <option value="NotSet">Undefined...</option>

                @foreach (var item in settings.GadgetDefinitions)
                {
                    <option value="@item.Id">(@item.Type) @item.Name</option>
                }




            </InputSelect>
            <ValidationMessage For="@(() => Gadget.Status)" />
        </div>

         <div class="form-group">
            <label for="status">Status: </label>
            <InputSelect Id="status" Class="form-control" @bind-Value="@Gadget.Status">
                <option value="">Please Select...</option>
                <option value="NotSet">Undefined...</option>
                <option value="Active">Active</option>
                <option value="Passive">Pasive</option>

            </InputSelect>
            <ValidationMessage For="@(() => Gadget.Status)" />
        </div>

        <div class="form-group">
            <label for="status">Position: </label>
            <InputSelect Id="status" Class="form-control" @bind-Value="@Gadget.SectionPosition">
                <option value="">Please Select...</option>
                <option value="NotSet">Undefined...</option>
                <option value="Free">Free/Floating</option>
                <option value="TopRight">Top Right</option>
                <option value="TopCenter">Top Center</option>
                <option value="TopLeft">Top Left</option>
                <option value="MiddleRight">Middle Right</option>
                <option value="MiddleCenter">Middle Center</option>
                <option value="MiddleLeft">Middle Left</option>
                <option value="BottomRight">Bottom Right</option>
                <option value="BottomCenter">Bottom Center</option>
                <option value="BottomLeft">Bottom Left</option>
            </InputSelect>
            <ValidationMessage For="@(() => Gadget.Status)" />
        </div>

    </FormTemplate>
</ModifyItemComponent>

@code {
    [Parameter]
    public Guid GadgetId { get; set; }

    [Parameter]
    public Guid SectionId { get; set; }

    [Parameter]
    public Gadget Gadget { get; set; }

    private bool pageBusinessInitalized = false;
    private bool isNew = false;

    private Settings settings = null;

    protected override async Task OnParametersSetAsync()
    {
        settings = await SettingsClient.GetAsync();

        Gadget = settings.FindGadget(GadgetId);
        

        if (Gadget == null)
        {
           
            Gadget = new Gadget();
            Gadget.Id = GadgetId;
            isNew = true;
        }

        pageBusinessInitalized = true;
    }


    private async Task<List<SaveResponseAction>> OnSave()
    {

        if (isNew)
        {
            var Section  = settings.FindSection(SectionId);
            Section.Gadgets.Add(Gadget);
        }


        var result = await SettingsClient.SaveAsync(settings);
        List<SaveResponseAction> actionItems = result.Actions;
        return actionItems;
    }

}